#!/usr/bin/env perl

use Modern::Perl;

use Mojolicious::Lite;
use DateTime::Format::MySQL;

use lib 'library';
use Model;

my $MODEL = Model->new;

get '/' => sub {

    my $self = shift;
    $self->render('home', layout => 'default');

};

#### Pages...

get '/home' => sub {

    my $self = shift;

    $self->render('home', layout => 'default');

} => 'home';

get '/featured' => sub {

    my $self = shift;
    $self->{'page'} = 'featured';
    
    $self->{articles} = $MODEL->get_articles(list => 'featured');
    $self->render('featured', layout => 'default');

} => 'featured';

get '/watch_list' => sub {

    my $self = shift;
    $self->{'page'} = 'watch_list';

    $self->{articles} = $MODEL->get_articles(list => 'watch_list');

    $self->render('watch_list', layout => 'default');

} => 'watch_list';

get '/inbox' => sub {

    my $self = shift;
    $self->{'page'} = 'inbox';

    $self->{articles} = $MODEL->get_articles(list => 'inbox');

    $self->render('inbox', layout => 'default');

} => 'inbox';

### Functions...

get '/:feed/:id' => [feed => qr/\w+/, id => qr/\d+/] => sub {

    my $self = shift;

    my $feed = $self->param('feed');
    my $id   = $self->param('id');

    $self->{articles} = \@{$MODEL->get_article(feed => $feed, id => $id)};

    print @{$self->{articles}};

    $self->render('article', layout => 'default');

} => 'article';

get '/:page/filter' => [page => qr/\w+/] => sub {

    my $self = shift;
    $self->{'page'} = $self->param('page');

    my $page = $self->param('page');

    # Only supports a single 'string' query that matches against
    # the 'title' of the article. I should make this so that
    # any column of the database can be filtered; i.e title,info,url...
    # I think this should really be a SQL query in Model.pm too...

    if ($self->param('string')) {

        my @results;

        for (@{$MODEL->get_articles(list => $page)}) {

            my $string = $self->param('string');

            push @results, $_ if $_->{title} =~ m/$string/i;
        }

        $self->{articles} = \@results;
    }

    $self->render($page, layout => 'default');

};

get '/:page/:date' => [page => qr/\w+/, date => qr/\w+/] => sub {

    my $self = shift;
    $self->{'page'} = $self->param('page');

    my $page = $self->param('page');
    my $date = $self->param('date');
    my @filtered_articles;

    for (@{$MODEL->get_articles(list => $page)}) {

        if ($date eq 'today') {

            my $article_date =
              DateTime::Format::MySQL->parse_date($_->{date});
            my $today_date = DateTime->now;

            next if $article_date->day_of_year != $today_date->day_of_year;
            push @filtered_articles, $_;

        }
        elsif ($date eq 'week') {

            my $article_date =
              DateTime::Format::MySQL->parse_date($_->{date});
            my $week_date = DateTime->now->subtract(days => 7);

            next if $article_date->day_of_year <= $week_date->day_of_year;
            push @filtered_articles, $_;

        }
        elsif ($date eq 'month') {

            my $article_date =
              DateTime::Format::MySQL->parse_date($_->{date});
            my $month_date = DateTime->now->subtract(days => 30);

            next if $article_date->day_of_year <= $month_date->day_of_year;
            push @filtered_articles, $_;

        }
    }

    $self->{articles} = \@filtered_articles;
    $self->render($page, layout => 'default');

};

post '/vote' => sub {

    my $self = shift;

    if (($self->param('name')) and ($self->param('tbl_id'))) {

        $MODEL->do_vote(
            name   => $self->param('name'),
            tbl_id => $self->param('tbl_id')
        );
    }

};

post '/model' => sub {

    my $self = shift;

    $MODEL->get_feeds()
      if $self->param('get_feeds');

    $MODEL->do_prune()
      if $self->param('do_prune');

    $MODEL->do_rss()
      if $self->param('do_rss');

    $self->redirect_to('/');

};


app->config(hypnotoad => {listen => ['http://*:80']});
app->secret('TVS Rocks!');
app->start;
